#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
}n;
n* create(n* head,int value)
{
   n* temp= (n*)malloc(sizeof(n));
if (temp==NULL)
{
    printf("no space in memory");
    return NULL;
}
   temp->data=value;
   temp->next=NULL;
   return temp;
}
// insert at beginning
n* insertatbeg(n* head,int value) 
{
 n* newnode=create(head,value);
 if(head==NULL)
 {
    return newnode;
 }
 else
 {
 newnode->next=head;
 head=newnode;
 return head;
 }
}
n* insertatlast(n* head,int value)
{
    n* newnode2=create(head,value);
    if(head==NULL)
    {
        head=newnode2;
        return head;
    }
    else
    {
        n* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode2;
    }
    return head;

}
n* insertanywhere(n* head,int pos,int value)
{
    n* newnode=create(head,value);
    n* temp=head;
    int c=0;
    if(pos==0)
    {
        newnode->next=head;
        return newnode;
    }
    while(temp!=NULL && c<pos-1)
    {
        temp=temp->next;
        c++;
    }
    newnode->next=temp->next;
    temp=newnode;
    return head;
}
n* deletionatbeg(n* head)
{
    if(head==NULL)
    {
        return NULL;
    }
    else{
        n* temp=head;
        head=head->next;
        free(temp);
    }
    return head;
    }
// Delete at the last of the list
n* deleteatlast(n* head) {
    if (head == NULL) {
        printf("The list is empty. Nothing to delete.\n");
        return NULL;
    }
    if (head->next == NULL) {  // Only one node in the list
        free(head);
        return NULL;
    }
    n* temp = head;
    while (temp->next != NULL && temp->next->next != NULL) {
        temp = temp->next;
    }
    free(temp->next);  // Free the last node
    temp->next = NULL;  // Set the second last node's next pointer to NULL
    return head;
}
n* deleteatanywhere(n*head,int pos)
{
    n* current=head;
    n* prev=NULL;
    int c=0;
   if(pos==0) 
   {
    n* temp=head;
    head=head->next;
    free(temp);
    return head;
   }
   else
   {
    while(c<pos && current!=NULL  )
    {
        prev=current;
        current=current->next;
        c++;
    }
    prev->next=current->next;
    free(current); 
   }
    return head; 
}
void display(n* head)
{
 n* p1=head;
while(p1!=NULL)
{
    printf("%d ->",p1->data);
    p1=p1->next;
}
printf("NULL\n");
}
int main(){
n* head=NULL;
int choice,item,pos;
do{
    printf("enter your choice:\n");
    printf("1.insert at beginning\n");
    printf("2.insert at last\n");
    printf("3.insert at a position\n");
    printf("4. delete at beg\n");
    printf("5. del at last\n");
    printf("6. del at a position\n");
    printf("7. display\n");
    scanf("%d",&choice);
    switch(choice)
    {
        case 1:
        printf("enter the item:");
        scanf("%d",&item);
        head=insertatbeg(head,item);
        break;
        case 2:
        printf("enter the item:\n");
        scanf("%d",&item);
        head=insertatlast(head,item);
        break;
        case 3:
        printf("enter the item:\n");
        scanf("%d",&item);
        printf("enter the position:\n");
        scanf("%d",&pos);
        head=insertanywhere(head,pos,item);
        break;
        case 4:
       head= deletionatbeg(head);
        break;
        case 5:
       head= deleteatlast(head);
        break;
        case 6:
        printf("enter the position:\n");
        scanf("%d",&pos);
       head= deleteatanywhere(head,pos);
        
        break;
        case 7:
        display(head);
        break;
        default:
            exit(0);
        }

    }while(1);
    return 0;
}



   







    
